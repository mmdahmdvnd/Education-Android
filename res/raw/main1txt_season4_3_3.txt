//سنسور شتاب سنج سنسوریست که با کج شدن دستگاه از حالت مسطح ، به چپ یا راست(برای محور x) ، به جلو یا عقب(برای محور y) و در حالت عمود بودن دستگاه(برای محور z) ، مقدار برگشتی از سنسور را نشان میدهد :
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.view.Menu;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

//اینتر فیس SensorEventListener ایمپلیمنت شده تا برنامه متد های این اینترفیس را که لازم دارد اجرا کند(برای استفاده از سنسور میبایست اینترفیس مربوط به آن را توسط کلاس ایمپلیمنت کرد) :
public class Main extends Activity implements SensorEventListener {

	private TextView txt;
   private ImageView img;

   	private int h;
	private int w;
//تعریف یک سنسور منجر و یک سنسور :
	private SensorManager sm;
	private Sensor AccM;
	
	private int top=10;
	private int left=10;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        txt=(TextView) findViewById(R.id.txt);
        img=(ImageView) findViewById (R.id.img);

//دیسپلی متریک(DisplayMetrics) را بمنظور بدست آوردن ابعاد صفحه نمایش دیوایس(دستگاه) بکار برده ایم . چون در هر دیوایسی ابعاد صفحه نمایش(screen) متفاوت است پس ابتدا ابعاد صفحه نمایش را بدست آورده و ابعاد را به پیکسل تبدیل میکنیم و در برنامه استفاده میکنیم :
        DisplayMetrics dm=new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(dm); 
        h=dm.heightPixels;
        w=dm.widthPixels;
        
 //تعریف سنسور منجر بمنظور دریافت سنسور سرویس از دستگاه . بکار بردن کانتکست در اینجا به این علت است که چون یک پروسه توسط سیستم انجام میشود(SENSOR_SERVICE) پس باید از کانتکست استفاده شود تا این پروسه انجام شود :  
        sm=(SensorManager) getSystemService(Context.SENSOR_SERVICE);
       
//توسط سنسور منجر ، سنسور شتاب سنج را دریافت میکنیم :
        AccM=sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);     
    }

//اولین متد ضروری برای ایمپلیمنتی که در ابتدای کلاس از سنسورها انجام شد(این متد زمانی فراخوانی میشود که دقت سنسور تغییر کند) :
	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub	
	}

//دومین متد ضروری کلاس(این متد زمانی فراخوانی میشود که سنسور تغییر کند یعنی زمانیکه مقداری که بعنوان خروجی برمیگرداند تغییر کند) :
//عدد صفر[0] ، [1] و [2] کدهاییست که به عنوان کد پیشفرض برای این سنسور تعیین شده و ثابت است . i و j و k هر کدام مقدار برگشتی از سنسور را بعنوان شتاب در جهت محور x یا y یا z نشان میدهند :
	@Override
	public void onSensorChanged(SensorEvent s) {
		
		float i=s.values[0];
		float j=s.values[1];
		float k=s.values[2];
			
				txt.setText("i:"+i+"\n"+"j:"+j+"\n"+"k"+k);
	
//تبدیل مقادیر بالا به اینتیجر :
		int x=(int)s.values[0];
		int y=(int)s.values[1];

//این الگوریتم حرکت توپ به طرف راست یا چپ و جلو یا عقب را کنترل میکند . وقتی دستگاه به راست کج شود مقدار x(یا همان i) منفی میشود و با کج شدن به چپ مقدار x مثبت میشود . مقدار y(یا همان j) با کج شدن دستگاه به جلو مثبت میشود و با کج شدن به عقب منفی میشود . top و left هم فاصله ایست که توپ با حرکت در صفحه ، از بالا و چپ صفحه نمایش میگیرد :
		if(y<0){
			if(top>0){
			top=top+y*3;
			}
		}else{
			if(top<h-180){
			top=top+y*3;
			}
		}


		if(x<0){	
			if(left<w-110){
			left=left-x*3;
			}
		}else{
			if(left>0){
			left=left-x*3;
			}
		}
	
//این قطعه کد به منظور تعیین ابعاد img و همچنین تعیین فاصله ایست که توپ با حرکت ، از بالا و چپ صفحه نمایش میگیرد(بجای WRAP_CONTENT میتوان ابعاد دلخواه برای img تعیین کرد) :
		RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
		lp.setMargins(left, top, 0, 0);
		img.setLayoutParams(lp);
	
	}


//در زمان استفاده از یک سنسور از دستگاه ، تنها همان سنسور موجود است و استفاده از سنسور دستگاه بلوکه میشود و تنها به این سنسور کنونی تعلق میگیرد . پس دو متد زیر
به منظور ثبت(register) کردن سنسور بعنوان سنسور کنونی میبایست تنظیم شوند(عبارت SENSOR_DELAY_NORMAL) به معنی این است که سیستم سنسور بصورت مدت زمان معمولی در اختیار این سنسور کنونی قرار میگیرد(سایر عبارتها را هم میتوان با فشردن کلیدهای Ctrl+Space از IDE مورد استفاده ی خود ، جایگزین کرد))  :
@Override
	protected void onResume() {
		super.onResume();	
		sm.registerListener(this, AccM, SensorManager.SENSOR_DELAY_NORMAL);	
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		sm.unregisterListener(this);
	}
 
}
